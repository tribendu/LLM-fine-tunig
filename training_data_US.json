[
  {
    "instruction": "Create a Jira user story for a financial advisor platform.",
    "input": "User Role: Financial Advisor, Task: Generate financial reports for clients",
    "output": "As a Financial Advisor, I want to generate financial reports for my clients so that I can provide them with a clear understanding of their financial progress.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given the financial reporting tool, when I select a client’s data, then a report should be generated summarizing their financial performance.\n- Given customizable report templates, when I create reports, then I should be able to choose the format and metrics most relevant to the client’s goals.\n- Given periodic reporting, when I set a schedule, then reports should be generated and sent to clients automatically.\n- Given historical data, when generating a report, then it should include year-over-year performance comparisons.\n\nNegative Scenarios:\n- Given incomplete data, when I attempt to generate a report, then I should receive a notification identifying missing information.\n- Given system downtime, when I request a report, then the system should alert me of the delay and provide an estimated resolution time.\n- Given formatting errors, when reports are generated, then they should display correctly across all devices and media.\n- Given incorrect report parameters, when generating a report, then I should receive a warning and the option to correct the inputs before proceeding."
  },
  {
    "instruction": "Create a Jira user story for a financial advisor platform.",
    "input": "User Role: Financial Advisor, Task: Set investment alerts for portfolio monitoring",
    "output": "As a Financial Advisor, I want to set investment alerts for my clients' portfolios so that I can proactively respond to market changes.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given an alert configuration tool, when I set thresholds (e.g. stock price, asset allocation), then the system should notify me when those thresholds are reached.\n- Given multiple portfolio alerts, when I configure them, then the system should handle concurrent alerts without delay.\n- Given different alert types (e.g. email, SMS), when alerts are triggered, then I should receive notifications through my preferred method.\n- Given a market event, when an alert is triggered, then I should be able to view detailed information about the event directly from the notification.\n\nNegative Scenarios:\n- Given incorrect alert configuration, when thresholds are not met, then I should not receive false notifications.\n- Given delayed alerts, when an alert is triggered, then I should be notified of the latency issue.\n- Given a high alert volume, when multiple alerts are triggered simultaneously, then they should be queued and delivered without overwhelming the system.\n- Given alert misconfiguration, when I review the alert settings, then I should receive recommendations to improve accuracy."
  },
  {
    "instruction": "Create a Jira user story for a financial advisor platform.",
    "input": "User Role: Financial Advisor, Task: View client risk tolerance levels",
    "output": "As a Financial Advisor, I want to view my clients' risk tolerance levels so that I can recommend investment strategies aligned with their preferences.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given the client risk assessment tool, when I access a client’s profile, then their risk tolerance level should be displayed prominently.\n- Given risk assessment updates, when clients modify their risk preferences, then the changes should be reflected in their profile in real time.\n- Given risk tolerance categories, when I review client data, then the system should segment clients into low, medium, and high-risk profiles based on their answers.\n- Given risk-related reports, when I view client data, then I should be able to generate reports analyzing risk tolerance trends over time.\n\nNegative Scenarios:\n- Given incomplete risk assessment data, when I try to view a client's risk tolerance, then I should receive a notification to complete the assessment.\n- Given outdated client information, when I view their risk profile, then I should receive a prompt to verify and update their risk tolerance levels.\n- Given inconsistencies in risk data, when reviewing risk assessments, then I should be alerted to any discrepancies between reported preferences and actual investment behavior.\n- Given technical issues, when loading client risk tolerance data, then I should receive an error message with troubleshooting instructions."
  },
  {
    "instruction": "Create a Jira user story for a financial advisor platform.",
    "input": "User Role: Financial Advisor, Task: Review and assess client portfolio performance",
    "output": "As a Financial Advisor, I want to review my clients' portfolio performance so that I can ensure their investments are aligned with their financial goals.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given a portfolio performance dashboard, when I select a client, then I should see a breakdown of their portfolio performance over time.\n- Given performance metrics (e.g., ROI, benchmark comparisons), when I analyze a portfolio, then I should be able to compare its performance against relevant benchmarks.\n- Given customizable views, when I analyze performance, then I should be able to filter by asset class, time frame, and other relevant criteria.\n- Given historical data, when reviewing a portfolio, then I should be able to track performance trends and provide insights to clients.\n\nNegative Scenarios:\n- Given missing performance data, when I try to view a portfolio, then I should receive a notification with details of the missing information.\n- Given incorrect performance calculations, when reviewing portfolio data, then I should be alerted to potential discrepancies for further investigation.\n- Given a slow-loading dashboard, when accessing performance data, then the system should notify me of any delays and provide an estimated resolution time.\n- Given outdated performance metrics, when I review portfolio performance, then I should be prompted to refresh the data before making any recommendations."
  },
  {
    "instruction": "Create a Jira user story for a financial advisor platform.",
    "input": "User Role: Financial Advisor, Task: Create comprehensive financial plans for clients",
    "output": "As a Financial Advisor, I want to create comprehensive financial plans for my clients so that I can guide them towards achieving their financial goals.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given the financial planning tool, when I enter client data, then the system should generate a customized financial plan based on their goals and risk profile.\n- Given different financial goals (e.g. retirement, education, home purchase), when I create a plan, then I should be able to adjust the strategy for each goal.\n- Given dynamic planning features, when client circumstances change, then the plan should be easily updated to reflect new financial data.\n- Given regulatory guidelines, when creating financial plans, then the system should ensure compliance with relevant financial regulations.\n\nNegative Scenarios:\n- Given incomplete client information, when I attempt to generate a plan, then I should receive an alert indicating the missing details.\n- Given inconsistent client goals, when I create a financial plan, then I should receive a notification to address conflicting objectives.\n- Given outdated financial projections, when generating plans, then I should be prompted to update assumptions based on current market data.\n- Given system errors, when saving a financial plan, then I should receive an error message and instructions to retry or contact support."
  },
  {
    "instruction": "Create a Jira user story for a financial advisor platform.",
    "input": "User Role: Financial Advisor, Task: Review client portfolios for compliance with regulatory requirements",
    "output": "As a Financial Advisor, I want to review client portfolios for compliance so that I can ensure that they meet all relevant regulatory requirements.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given a compliance audit tool, when I assess a client’s portfolio, then the system should flag any areas that require attention.\n- Given regulatory updates, when new regulations are introduced, then I should receive guidance on how to bring portfolios into compliance.\n- Given specific compliance requirements (e.g. anti-money laundering rules), when reviewing a portfolio, then I should be able to verify adherence to these standards.\n- Given audit trails, when I complete a compliance review, then the system should log the activity for future reference.\n\nNegative Scenarios:\n- Given incomplete compliance data, when I review a portfolio, then the system should notify me of missing information that could affect compliance.\n- Given regulatory violations, when they are detected, then I should be alerted and provided with steps to correct the issue.\n- Given outdated regulatory guidelines, when reviewing portfolios, then I should receive a prompt to update my compliance settings.\n- Given system errors, when generating compliance reports, then I should receive an error message and guidance on next steps."
  },
  {
    "instruction": "Create a Jira user story for a financial advisor platform.",
    "input": "User Role: Financial Advisor, Task: Automate communication with clients for key events",
    "output": "As a Financial Advisor, I want to automate communication with my clients for key events so that I can maintain consistent engagement without manual effort.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given an automation tool, when I schedule communications, then the system should send personalized messages to clients based on the specified event.\n- Given recurring events (e.g. annual reviews), when the event date approaches, then reminders should be automatically sent to clients.\n- Given portfolio milestones, when certain thresholds are reached (e.g. investment growth), then the system should notify both me and the client.\n- Given client preferences, when scheduling automated messages, then I should be able to select the preferred communication channels (e.g. email, SMS).\n\nNegative Scenarios:\n- Given a failure in the automation system, when messages are not sent, then I should receive a notification about the failure and suggested resolutions.\n- Given incorrect client contact information, when the system attempts to send a message, then I should be notified of delivery issues.\n- Given communication overload, when scheduling messages, then the system should warn me if I am sending too many communications in a short period.\n- Given client opt-outs, when automating messages, then the system should respect client communication preferences and avoid sending unwanted messages."
  },
  {
    "instruction": "Create a Jira user story for a financial advisor platform.",
    "input": "User Role: Financial Advisor, Task: Manage client onboarding process",
    "output": "As a Financial Advisor, I want to manage the client onboarding process so that new clients can be smoothly integrated into my practice.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given the onboarding tool, when I initiate onboarding, then the system should guide the client through all necessary steps (e.g. document submission, profile creation).\n- Given multiple onboarding stages, when I track progress, then I should be able to see where clients are in the process and follow up as needed.\n- Given automated reminders, when a client has not completed an onboarding step, then the system should send a follow-up reminder.\n- Given compliance checks, when clients submit their information, then the system should verify that all regulatory requirements are met before account activation.\n\nNegative Scenarios:\n- Given incomplete client information, when onboarding is not completed, then I should receive a notification identifying the missing elements.\n- Given a delay in document verification, when I check onboarding status, then I should see an alert and an estimated completion time.\n- Given system errors, when clients attempt to submit documents, then they should receive an error message with instructions to retry.\n- Given security concerns, when handling sensitive client data during onboarding, then the system should ensure all data is encrypted and protected from unauthorized access."
  },
  {
    "instruction": "Create a Jira user story for a financial advisor platform.",
    "input": "User Role: Financial Advisor, Task: Rebalance client portfolios based on market conditions or client preferences",
    "output": "As a Financial Advisor, I want to rebalance client portfolios so that they remain aligned with their financial goals and risk tolerance.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given the rebalancing tool, when I review a client’s portfolio, then I should be able to adjust allocations to maintain the desired asset mix.\n- Given market volatility, when it affects a portfolio, then I should receive suggestions from the system on how to rebalance.\n- Given automatic rebalancing options, when a portfolio drifts from its target allocation, then the system should trigger an automatic rebalance.\n- Given client approval requirements, when rebalancing is recommended, then clients should be notified and given the opportunity to approve or reject the changes.\n\nNegative Scenarios:\n- Given incorrect asset data, when attempting to rebalance, then the system should flag the inconsistency and request data verification.\n- Given delays in executing trades for rebalancing, when reviewing the portfolio, then I should be notified of the delay and provided an updated timeline.\n- Given conflicting client preferences, when rebalancing is recommended, then I should be prompted to resolve any discrepancies before proceeding.\n- Given system downtime during rebalancing, when I attempt to execute trades, then I should receive an error message and instructions on how to retry once the system is back online."
  },
  {
    "instruction": "Create a Jira user story for a financial advisor platform.",
    "input": "User Role: Financial Advisor, Task: Generate tax reports for clients based on their portfolio performance",
    "output": "As a Financial Advisor, I want to generate tax reports for my clients so that they can accurately file their taxes with relevant investment data.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given the tax reporting tool, when I generate reports, then they should include all necessary tax-related information (e.g. gains, losses, dividends).\n- Given different tax jurisdictions, when generating reports, then the system should account for jurisdiction-specific tax laws and calculations.\n- Given a client's annual portfolio activity, when generating the report, then it should break down all taxable events and categorize them appropriately.\n- Given automated reporting options, when tax season approaches, then reports should be generated and sent to clients automatically.\n\nNegative Scenarios:\n- Given incomplete portfolio data, when attempting to generate a tax report, then I should receive a notification identifying the missing information.\n- Given incorrect tax calculations, when reviewing the report, then the system should flag potential errors for further review.\n- Given a failure in report generation, when I request a report, then I should receive an error message and guidance on how to resolve the issue.\n- Given changes in tax law, when generating reports, then I should be prompted to update the system to reflect the new regulations."
  },
  {
    "instruction": "Create a Jira user story for a financial advisor platform.",
    "input": "User Role: Financial Advisor, Task: Provide estate planning advice to clients",
    "output": "As a Financial Advisor, I want to provide estate planning advice so that my clients can effectively manage the transfer of their wealth to future generations.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given the estate planning tool, when I assess a client’s financial situation, then I should be able to generate estate planning recommendations tailored to their needs.\n- Given different estate planning options, when I review a client's situation, then I should be able to propose strategies such as trusts, wills, and charitable donations.\n- Given tax implications of estate transfers, when providing advice, then I should ensure that recommendations minimize tax liabilities for heirs.\n- Given dynamic estate planning needs, when a client’s situation changes, then I should be able to update their estate plan accordingly.\n\nNegative Scenarios:\n- Given incomplete client information, when I attempt to generate an estate plan, then I should receive a notification identifying the missing elements.\n- Given legal or tax discrepancies, when providing advice, then I should receive alerts if certain recommendations conflict with applicable laws.\n- Given outdated estate plans, when reviewing a client's file, then I should be prompted to update the plan based on current laws and client wishes.\n- Given system errors, when saving an estate plan, then I should receive an error message and instructions to retry or contact support."
  },
  {
    "instruction": "Create a Jira user story for a financial advisor platform.",
    "input": "User Role: Financial Advisor, Task: Conduct risk assessments for new investments",
    "output": "As a Financial Advisor, I want to conduct risk assessments for new investments so that I can advise my clients on the potential risks and rewards.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given the risk assessment tool, when I analyze a new investment, then the system should generate a risk profile based on historical performance and market data.\n- Given client risk preferences, when assessing a new investment, then I should be able to compare its risk level with the client’s risk tolerance.\n- Given real-time market data, when conducting a risk assessment, then I should be able to factor in the latest market conditions.\n- Given customizable risk models, when reviewing an investment, then I should be able to adjust the model parameters to account for different scenarios.\n\nNegative Scenarios:\n- Given incomplete market data, when I conduct a risk assessment, then I should receive a notification identifying the missing elements.\n- Given incorrect risk calculations, when reviewing the assessment, then the system should flag any discrepancies for further review.\n- Given system errors, when generating a risk profile, then I should receive an error message and instructions to retry or contact support.\n- Given outdated risk models, when conducting assessments, then I should be prompted to update the models based on current market conditions."
  },
  {
    "instruction": "Create a Jira user story for a financial advisor platform.",
    "input": "User Role: Financial Advisor, Task: Customize investment portfolios based on client preferences",
    "output": "As a Financial Advisor, I want to customize investment portfolios for my clients so that their investments align with their unique goals and values.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given a client’s preferences (e.g. ESG factors, specific industries), when customizing a portfolio, then I should be able to exclude or include investments based on those criteria.\n- Given different asset classes, when customizing a portfolio, then I should be able to allocate assets according to the client’s risk tolerance and financial goals.\n- Given a client’s changing preferences, when updating a portfolio, then the system should allow me to adjust the investment strategy accordingly.\n- Given portfolio templates, when I create a custom portfolio, then I should be able to start with a template and make adjustments as needed.\n\nNegative Scenarios:\n- Given incorrect data on client preferences, when customizing a portfolio, then the system should flag any discrepancies and request confirmation.\n- Given restricted investments (e.g. regulatory restrictions), when customizing a portfolio, then the system should alert me if a selected investment is not allowed.\n- Given system errors, when saving a customized portfolio, then I should receive an error message and instructions to retry.\n- Given performance issues, when updating a customized portfolio, then I should be notified of any delays or issues with executing trades."
  },
  {
    "instruction": "Create a Jira user story for a financial advisor platform.",
    "input": "User Role: Financial Advisor, Task: Schedule meetings with clients to review their financial plans",
    "output": "As a Financial Advisor, I want to schedule meetings with my clients so that I can review their financial plans and make necessary adjustments.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given the scheduling tool, when I select a client, then I should be able to schedule a meeting and send an invitation directly from the system.\n- Given different meeting types (e.g. in-person, virtual), when scheduling a meeting, then I should be able to specify the meeting format and provide details to the client.\n- Given recurring review meetings, when scheduling, then I should be able to set up recurring appointments at regular intervals.\n- Given client availability, when scheduling a meeting, then the system should allow me to propose multiple time slots based on both of our calendars.\n\nNegative Scenarios:\n- Given scheduling conflicts, when a client is not available at the proposed time, then the system should prompt me to choose alternative dates.\n- Given system errors, when sending meeting invitations, then I should receive an error message and guidance on resolving the issue.\n- Given incorrect time zones, when scheduling virtual meetings, then the system should automatically adjust for time zone differences.\n- Given client opt-outs, when scheduling recurring meetings, then the system should respect the client’s preference to decline future appointments."
  },
  {
    "instruction": "Create a Jira user story for a developer platform.",
    "input": "User Role: Developer, Task: Implement two-factor authentication for enhanced security",
    "output": "As a Developer, I want to implement two-factor authentication (2FA) so that clients can securely access their accounts.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given the 2FA feature, when a client logs in, then they should be prompted to enter a second authentication factor (e.g. SMS code, authenticator app).\n- Given different 2FA methods, when setting up the feature, then clients should be able to choose their preferred method of two-factor authentication.\n- Given failed 2FA attempts, when a client enters an incorrect code, then they should receive a notification and be allowed to retry.\n- Given successful 2FA setup, when a client logs in, then they should experience a seamless login process without excessive delays.\n\nNegative Scenarios:\n- Given incorrect 2FA configurations, when a client attempts to log in, then the system should alert me to the configuration issue and provide steps to fix it.\n- Given device compatibility issues, when setting up 2FA, then the system should notify clients of any potential limitations.\n- Given system errors during 2FA setup, when clients attempt to enable two-factor authentication, then they should receive an error message and instructions to retry.\n- Given multiple failed 2FA attempts, when a client is locked out of their account, then the system should provide guidance on how to regain access."
  },
  {
    "instruction": "Create a Jira user story for a financial advisor platform.",
    "input": "User Role: Financial Advisor, Task: Review client spending patterns for better budgeting advice",
    "output": "As a Financial Advisor, I want to review my clients’ spending patterns so that I can provide better budgeting and savings advice.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given a client's transaction data, when I review their spending patterns, then I should be able to categorize and analyze their expenses to identify areas for savings.\n- Given spending trends over time, when I review the data, then I should be able to generate reports that show changes in spending behavior.\n- Given budgeting recommendations, when I assess a client's spending, then I should be able to suggest adjustments to improve their financial health.\n- Given automated spending alerts, when clients exceed a budget threshold, then both the client and I should receive notifications.\n\nNegative Scenarios:\n- Given incomplete transaction data, when reviewing spending patterns, then the system should alert me to any missing or incomplete data.\n- Given incorrect categorization of expenses, when analyzing spending patterns, then the system should allow me to manually re-categorize transactions.\n- Given delays in updating transaction data, when reviewing spending patterns, then the system should notify me of the delay and provide an estimated update time.\n- Given system errors, when generating spending reports, then I should receive an error message and guidance on how to retry or contact support."
  },
  {
    "instruction": "Create a Jira user story for a financial advisor platform.",
    "input": "User Role: Financial Advisor, Task: Set and track savings goals for clients",
    "output": "As a Financial Advisor, I want to set and track savings goals for my clients so that I can help them achieve their financial objectives.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given the goal-setting tool, when I create a savings goal for a client, then it should be tracked in their profile with progress updates over time.\n- Given different savings objectives (e.g. emergency fund, vacation), when setting goals, then I should be able to customize each goal based on the client’s needs.\n- Given automated tracking features, when a client makes progress towards their goal, then the system should automatically update the progress bar and notify both the client and me.\n- Given milestone-based savings, when a client reaches a savings milestone, then both the client and I should receive a notification to celebrate the achievement.\n\nNegative Scenarios:\n- Given incorrect savings goal calculations, when reviewing a client’s progress, then the system should flag any discrepancies and suggest corrections.\n- Given system errors, when saving a new goal, then I should receive an error message and instructions to retry.\n- Given slow updates to savings progress, when reviewing a client’s goals, then I should be notified of any delays in reflecting the latest contributions.\n- Given incomplete goal details, when attempting to set a savings goal, then the system should prompt me to enter all required information before proceeding."
  },
  {
    "instruction": "Create a Jira user story for a financial advisor platform.",
    "input": "User Role: Financial Advisor, Task: Access and utilize portfolio analytics tools",
    "output": "As a Financial Advisor, I want to access portfolio analytics tools so that I can analyze my clients’ investments and provide better recommendations.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given the portfolio analytics tool, when I access it, then I should be able to analyze portfolio performance based on various metrics (e.g. ROI, volatility, asset allocation).\n- Given customizable analytics views, when I generate reports, then I should be able to select the metrics and time frames that are most relevant to the client’s goals.\n- Given real-time data, when I review portfolio performance, then I should be able to see up-to-date information on market trends and asset prices.\n- Given portfolio comparison features, when analyzing a client’s portfolio, then I should be able to compare it against industry benchmarks or peer portfolios.\n\nNegative Scenarios:\n- Given missing portfolio data, when I attempt to generate analytics reports, then the system should alert me to the missing data and provide steps to resolve the issue.\n- Given incorrect performance metrics, when reviewing analytics, then the system should flag potential calculation errors for further review.\n- Given system errors, when generating analytics reports, then I should receive an error message and instructions on how to retry.\n- Given slow response times, when accessing real-time data, then I should be notified of any delays and provided an estimated resolution time."
  },
  {
    "instruction": "Create a Jira user story for a financial advisor platform.",
    "input": "User Role: Financial Advisor, Task: Manage and update client investment preferences",
    "output": "As a Financial Advisor, I want to manage my clients' investment preferences so that their portfolios align with their evolving goals and values.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given the investment preferences tool, when I update a client’s preferences, then their portfolio should automatically reflect those changes (e.g. shift from aggressive to conservative investments).\n- Given ethical or environmental preferences, when I adjust a client’s investment criteria, then the system should exclude non-compliant investments from the portfolio.\n- Given real-time updates, when a client modifies their preferences, then the system should adjust their portfolio accordingly within a specified time frame.\n- Given diversified portfolios, when managing preferences, then I should be able to suggest changes that enhance diversification without exceeding the client’s risk tolerance.\n\nNegative Scenarios:\n- Given conflicting investment preferences, when updating a portfolio, then the system should alert me to the conflict and provide suggestions for resolution.\n- Given incomplete preference data, when managing preferences, then the system should prompt me to complete the missing fields before proceeding.\n- Given system delays, when updating investment preferences, then the system should notify me of any delays in reflecting the changes.\n- Given regulatory constraints, when modifying preferences, then the system should alert me if any proposed changes conflict with regulations."
  },
  {
    "instruction": "Create a Jira user story for a financial advisor platform.",
    "input": "User Role: Financial Advisor, Task: Provide college planning advice to clients",
    "output": "As a Financial Advisor, I want to provide college planning advice so that my clients can effectively save and plan for their children’s education.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given college savings calculators, when I assess a client’s financial situation, then I should be able to generate a tailored college savings plan.\n- Given different saving options (e.g. 529 plans, custodial accounts), when I provide advice, then I should be able to recommend the best option for each client’s situation.\n- Given college cost projections, when creating a plan, then I should be able to estimate future education costs and adjust savings recommendations accordingly.\n- Given progress tracking tools, when clients contribute to their college savings, then the system should automatically update their progress towards the goal.\n\nNegative Scenarios:\n- Given incomplete client data, when generating a college plan, then the system should prompt me to enter missing information before proceeding.\n- Given outdated college cost data, when reviewing plans, then the system should prompt me to update the cost projections.\n- Given system errors, when saving a college savings plan, then I should receive an error message and instructions to retry.\n- Given incorrect plan calculations, when reviewing college plans, then the system should flag potential errors for further review."
  },
  {
    "instruction": "Create a Jira user story for a developer platform.",
    "input": "User Role: Developer, Task: Automate deployment pipelines for continuous integration and delivery",
    "output": "As a Developer, I want to automate deployment pipelines so that new features and updates can be deployed consistently and efficiently.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given a continuous integration (CI) setup, when I push new code to the repository, then the pipeline should automatically build, test, and deploy the code to the appropriate environment.\n- Given multiple environments (e.g. dev, staging, production), when the pipeline runs, then it should deploy the code to the correct environment based on branch or tag.\n- Given a successful build, when deployment occurs, then the system should send a confirmation notification to the team.\n- Given rollback mechanisms, when a deployment fails, then the pipeline should automatically roll back to the previous stable version.\n\nNegative Scenarios:\n- Given an error in the build process, when the pipeline fails, then it should notify the developer with details of the failure and suggested fixes.\n- Given incomplete test coverage, when the code is pushed, then the pipeline should prevent deployment until all required tests pass.\n- Given a misconfiguration in the pipeline, when I deploy the code, then the system should flag the configuration issue and provide instructions to resolve it.\n- Given insufficient resources in the target environment, when deployment occurs, then the system should alert me to the resource limitation and abort the deployment."
  },
  {
    "instruction": "Create a Jira user story for a developer platform.",
    "input": "User Role: Developer, Task: Implement load balancing to support platform scalability",
    "output": "As a Developer, I want to implement load balancing so that the platform can handle increasing traffic without performance degradation.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given multiple application servers, when traffic spikes occur, then the load balancer should distribute incoming requests evenly across all servers.\n- Given high availability configurations, when a server goes offline, then the load balancer should redirect traffic to other active servers without user impact.\n- Given dynamic scaling capabilities, when the load exceeds a certain threshold, then the system should automatically spin up additional instances.\n- Given traffic patterns, when load balancing is active, then I should be able to monitor the performance of each server and adjust resource allocation as needed.\n\nNegative Scenarios:\n- Given a failed load balancing configuration, when traffic spikes occur, then the system should alert me to unbalanced server loads and provide suggestions for reconfiguration.\n- Given server downtime, when load balancing is unable to redirect traffic, then the system should send alerts and attempt recovery or failover strategies.\n- Given security threats (e.g. DDoS attacks), when load balancing is in effect, then the system should detect abnormal traffic patterns and throttle or block malicious requests.\n- Given incorrect resource scaling rules, when traffic increases, then the system should flag the misconfiguration and prevent unnecessary resource usage."
  },
  {
    "instruction": "Create a Jira user story for a developer platform.",
    "input": "User Role: Developer, Task: Automate database backups for data recovery",
    "output": "As a Developer, I want to automate database backups so that data can be restored quickly in the event of a failure or breach.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given a backup schedule, when it is configured, then the system should automatically create backups at the specified intervals (e.g. daily, weekly).\n- Given multiple storage locations, when backups are created, then they should be stored securely in both on-premise and cloud storage.\n- Given an incremental backup option, when automated backups run, then only the changes since the last backup should be saved to optimize storage use.\n- Given compliance requirements, when backups are created, then they should be encrypted and retained according to data retention policies.\n\nNegative Scenarios:\n- Given a failed backup attempt, when the system detects an issue, then it should alert me with details of the failure and attempt a retry.\n- Given insufficient storage, when backups are generated, then the system should notify me and prevent further backups until additional space is provisioned.\n- Given a data corruption incident, when backups are restored, then the system should verify the integrity of the data before allowing access.\n- Given outdated backup configurations, when retention policies change, then the system should prompt me to update the backup schedule accordingly."
  },
  {
    "instruction": "Create a Jira user story for a developer platform.",
    "input": "User Role: Developer, Task: Secure API endpoints against unauthorized access",
    "output": "As a Developer, I want to secure API endpoints so that only authorized users can access the platform's resources.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given an authentication system, when users attempt to access an API endpoint, then they should be required to provide valid API keys or OAuth tokens.\n- Given role-based access control, when users request data from an API, then the system should check their permissions and restrict access to authorized endpoints.\n- Given logging of API requests, when users interact with the API, then the system should record details of each request for audit and monitoring purposes.\n- Given SSL/TLS encryption, when API requests are made, then the data should be encrypted in transit to prevent eavesdropping or tampering.\n\nNegative Scenarios:\n- Given an invalid or expired token, when a user attempts to access an API endpoint, then the system should deny the request and return a 401 Unauthorized response.\n- Given rate-limiting rules, when users exceed their allowed API usage, then the system should throttle their requests and send a warning about the limit.\n- Given attempted unauthorized access, when suspicious activity is detected on an API endpoint, then the system should trigger security alerts and potentially block the user.\n- Given insecure endpoints, when conducting a security scan, then the system should flag any endpoints without proper authentication or encryption."
  },
  {
    "instruction": "Create a Jira user story for a developer platform.",
    "input": "User Role: Developer, Task: Implement auto-scaling for infrastructure to handle variable loads",
    "output": "As a Developer, I want to implement auto-scaling for the platform infrastructure so that the system can dynamically adjust resources based on traffic and usage.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given predefined scaling policies, when traffic exceeds a threshold, then the system should automatically add more compute instances to handle the load.\n- Given low traffic periods, when usage drops, then the system should automatically scale down resources to optimize cost-efficiency.\n- Given monitoring and analytics tools, when auto-scaling occurs, then I should be able to track the scaling events and resource usage in real-time.\n- Given specific scaling rules, when setting up auto-scaling, then I should be able to define triggers based on CPU, memory, or custom metrics.\n\nNegative Scenarios:\n- Given incorrect scaling policies, when the system attempts to scale, then it should notify me if there are configuration errors and fail gracefully.\n- Given a failure to scale, when traffic spikes occur, then the system should alert me to the inability to provision new resources and suggest manual intervention.\n- Given excessive scaling, when the system scales beyond the required capacity, then I should be alerted to resource over-provisioning and prompted to adjust the rules.\n- Given network latency issues during scaling, when new instances are added, then I should be notified of potential delays and their impact on performance."
  },
  {
    "instruction": "Create a Jira user story for a developer platform.",
    "input": "User Role: Developer, Task: Implement automated security scans to detect vulnerabilities",
    "output": "As a Developer, I want to implement automated security scans so that vulnerabilities in the code and infrastructure can be detected early and addressed promptly.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given a security scanning tool, when new code is pushed, then the system should automatically scan for vulnerabilities and generate a report.\n- Given a scheduled scan, when scans are configured to run periodically, then the system should perform regular security checks and alert me to any issues.\n- Given different scanning types (e.g. static code analysis, dynamic analysis), when the system runs, then it should cover both code vulnerabilities and runtime issues.\n- Given real-time alerts, when a critical vulnerability is detected, then I should receive immediate notifications to prioritize the fix.\n\nNegative Scenarios:\n- Given false positives in the security scan, when the system generates reports, then I should be able to review and dismiss non-issues to avoid unnecessary actions.\n- Given incomplete scan results, when the system encounters an issue, then it should notify me of the failure and attempt to rerun the scan.\n- Given a delay in vulnerability remediation, when critical issues are detected, then the system should escalate alerts until the vulnerabilities are addressed.\n- Given outdated scanning rules, when new vulnerabilities are discovered in the industry, then the system should prompt me to update the scanning tool."
  },
  {
    "instruction": "Create a Jira user story for a developer platform.",
    "input": "User Role: Developer, Task: Automate log monitoring and alerts for proactive issue detection",
    "output": "As a Developer, I want to automate log monitoring and alerts so that I can be notified of potential issues before they impact the system.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given a logging tool, when logs are generated, then the system should automatically monitor them for predefined patterns or anomalies.\n- Given a critical error in the logs, when the system detects an issue, then it should immediately send an alert to the development team with details.\n- Given customizable alert thresholds, when configuring the monitoring tool, then I should be able to set conditions that trigger alerts based on error severity and frequency.\n- Given historical logs, when reviewing past incidents, then I should be able to access archived logs to investigate the root cause of recurring issues.\n\nNegative Scenarios:\n- Given false positive alerts, when the system detects a non-critical issue, then it should allow me to adjust the sensitivity of the monitoring tool to reduce noise.\n- Given insufficient log storage, when the system attempts to store new logs, then it should notify me of storage limitations and suggest archiving or purging old logs.\n- Given monitoring failures, when the logging tool encounters an issue, then I should receive an alert and instructions on how to restore normal operations.\n- Given missed anomalies, when reviewing logs manually, then I should be able to configure the system to catch patterns that were previously overlooked."
  },
  {
    "instruction": "Create a Jira user story for a developer platform.",
    "input": "User Role: Developer, Task: Implement rate limiting for API requests to prevent abuse",
    "output": "As a Developer, I want to implement rate limiting for API requests so that the system can prevent abuse and ensure fair usage by all users.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given a rate-limiting configuration, when users exceed the allowed number of API requests per minute, then the system should return a 429 Too Many Requests response.\n- Given different user tiers, when rate-limiting is applied, then the system should enforce different limits based on user subscription levels (e.g. basic, premium).\n- Given burst requests, when users send many requests in a short time frame, then the system should queue and throttle the requests accordingly.\n- Given logging of rate-limited events, when users hit their limits, then the system should record the event for future analysis and reporting.\n\nNegative Scenarios:\n- Given incorrect rate-limiting configurations, when legitimate users are blocked, then the system should alert me to the configuration error and allow adjustments.\n- Given rate-limiting bypass attempts, when users try to circumvent the limits, then the system should detect the abuse and block further requests.\n- Given inconsistent rate-limiting policies, when different API endpoints have conflicting limits, then the system should flag the inconsistency and recommend corrections.\n- Given system downtime, when the rate-limiting service is unavailable, then the system should default to predefined safe limits to prevent abuse."
  },
  {
    "instruction": "Create a Jira user story for a developer platform.",
    "input": "User Role: Developer, Task: Implement automatic security patches to address vulnerabilities",
    "output": "As a Developer, I want to implement automatic security patches so that vulnerabilities can be fixed promptly without manual intervention.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given a security patch is released, when the system detects it, then it should automatically apply the patch during the scheduled maintenance window.\n- Given critical vulnerabilities, when a high-priority patch is available, then the system should apply it immediately and notify the development team of the update.\n- Given a testing environment, when patches are applied, then the system should automatically test the platform for compatibility before rolling it out to production.\n- Given version control of patches, when a patch is applied, then the system should log the update details and provide a rollback option if issues arise.\n\nNegative Scenarios:\n- Given failed patch applications, when an automatic patch fails, then the system should notify me of the failure and attempt to retry during the next window.\n- Given incompatible patches, when the system detects a conflict with existing software, then it should halt the update and alert me to resolve the issue manually.\n- Given delayed patch updates, when a critical vulnerability remains unpatched, then the system should escalate the issue until it is resolved.\n- Given misconfigurations after a patch, when the system encounters issues post-patch, then I should be notified with details and options for rollback."
  },
  {
    "instruction": "Create a Jira user story for a developer platform.",
    "input": "User Role: Developer, Task: Implement OAuth for secure user authentication",
    "output": "As a Developer, I want to implement OAuth for user authentication so that users can securely log into the platform using third-party services.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given an OAuth integration, when users log in, then they should be able to authenticate using their credentials from trusted third-party services (e.g. Google, Facebook).\n- Given OAuth tokens, when users authenticate, then the system should securely manage tokens and handle refreshes automatically when they expire.\n- Given role-based access, when users authenticate via OAuth, then the system should map their third-party accounts to appropriate roles and permissions within the platform.\n- Given OAuth security protocols, when users log in, then their data should be securely transmitted and protected from unauthorized access.\n\nNegative Scenarios:\n- Given expired OAuth tokens, when users attempt to access the platform, then the system should prompt them to reauthenticate and obtain a new token.\n- Given misconfigured OAuth settings, when users cannot log in, then the system should flag the issue and provide troubleshooting instructions.\n- Given OAuth service downtime, when the third-party service is unavailable, then the system should display a message indicating the temporary issue and provide alternative login options.\n- Given revoked OAuth permissions, when a user’s access is revoked, then the system should immediately prevent further access and notify the user of the change."
  },
  {
    "instruction": "Create a Jira user story for a financial advisor platform.",
    "input": "User Role: Financial Advisor, Task: Use AI to generate automated client reports based on portfolio performance",
    "output": "As a Financial Advisor, I want to use AI to generate automated client reports so that I can save time and provide clients with detailed insights into their investments.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given client portfolio data, when I trigger the AI-powered report generator, then the system should create a detailed report summarizing key metrics (e.g. ROI, risk assessment).\n- Given client preferences, when reports are generated, then AI should customize the content and tone of the report to match the client’s communication style.\n- Given recurring reporting schedules, when a report is due, then AI should automatically generate and send the report to both the advisor and the client.\n- Given AI-powered data analysis, when a report is created, then the system should include AI-driven insights and recommendations for portfolio adjustments.\n\nNegative Scenarios:\n- Given missing or incomplete data, when the AI attempts to generate a report, then it should notify the advisor to provide the necessary information.\n- Given AI misinterpretation of data trends, when a report is generated, then the system should alert the advisor if the insights appear inconsistent with expected outcomes.\n- Given report delivery failures, when the AI cannot send a report, then it should log the issue and notify both the advisor and the client.\n- Given outdated portfolio data, when AI generates a report, then it should prompt the advisor to refresh the data before proceeding."
  },
  {
    "instruction": "Create a Jira user story for a developer platform.",
    "input": "User Role: Developer, Task: Implement an AI-powered chatbot to assist with client inquiries",
    "output": "As a Developer, I want to implement an AI chatbot so that clients can receive instant assistance with common inquiries without needing direct advisor intervention.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given predefined client queries, when clients interact with the chatbot, then the AI should provide accurate and timely responses based on available data.\n- Given advanced natural language processing (NLP), when clients ask complex financial questions, then the AI chatbot should provide relevant and detailed answers.\n- Given integration with client portfolios, when clients ask for updates, then the chatbot should access real-time data to provide personalized information.\n- Given escalations, when the AI chatbot encounters a question it cannot answer, then it should notify the advisor for further assistance and offer to schedule a follow-up meeting.\n\nNegative Scenarios:\n- Given unclear or ambiguous client queries, when the chatbot cannot understand the question, then it should prompt the client for clarification or offer multiple options.\n- Given AI learning errors, when incorrect responses are provided, then the system should log the error and notify the developer to adjust the AI's training data.\n- Given service outages, when the chatbot is unavailable, then the system should alert users to try again later or contact support directly.\n- Given privacy concerns, when the chatbot accesses sensitive data, then it should ensure compliance with data protection regulations and mask sensitive details where necessary."
  },
  {
    "instruction": "Create a Jira user story for a financial advisor platform.",
    "input": "User Role: Financial Advisor, Task: Use AI to generate dynamic client risk profiles based on behavior and market trends",
    "output": "As a Financial Advisor, I want to use AI to dynamically generate client risk profiles so that I can provide better investment advice that adapts to changing conditions.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given client transaction and behavior data, when AI analyzes it, then it should automatically update the client’s risk profile based on real-time trends.\n- Given market volatility, when external conditions change, then AI should adjust risk assessments accordingly and notify the advisor of potential impacts.\n- Given client feedback, when clients adjust their risk tolerance, then the AI should factor in the new preferences and update the profile.\n- Given historical risk data, when AI generates risk profiles, then it should provide a comparison with the client’s past risk tolerance to identify significant shifts.\n\nNegative Scenarios:\n- Given inaccurate data inputs, when AI calculates risk, then it should alert the advisor to potential discrepancies in the data before updating the profile.\n- Given rapid market fluctuations, when AI misinterprets short-term trends as long-term risks, then it should prompt the advisor to review the changes before making adjustments.\n- Given conflicting data from different sources, when AI updates the risk profile, then it should highlight the inconsistencies and ask for manual confirmation.\n- Given a failure to update client preferences, when the risk profile is recalculated, then the system should notify the advisor if the AI could not incorporate recent inputs."
  },
  {
    "instruction": "Create a Jira user story for a financial advisor platform.",
    "input": "User Role: Financial Advisor, Task: Use AI to optimize client portfolios based on risk tolerance and market forecasts",
    "output": "As a Financial Advisor, I want to use AI to optimize client portfolios so that investments are better aligned with risk tolerance and market conditions.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given client investment data and market forecasts, when AI performs portfolio analysis, then it should suggest optimal asset allocations based on the client’s goals and risk tolerance.\n- Given changes in market conditions, when AI detects potential risks or opportunities, then it should recommend adjustments to the client’s portfolio.\n- Given portfolio performance tracking, when AI analyzes historical data, then it should offer insights on past decisions and suggest improvements for future strategies.\n- Given multi-objective optimization, when AI balances between risk, return, and liquidity, then it should provide a well-rounded portfolio suggestion.\n\nNegative Scenarios:\n- Given unpredictable market events, when AI-generated portfolio changes are too frequent, then the system should alert the advisor to review the recommendations manually.\n- Given conflicting AI strategies, when different optimization algorithms offer inconsistent advice, then the system should prompt the advisor to resolve the discrepancy.\n- Given incomplete data, when AI attempts to optimize a portfolio, then it should alert the advisor to the missing information and request input before proceeding.\n- Given client objections to AI recommendations, when AI suggests changes, then the system should allow the advisor to override the AI and provide custom advice."
  },
  {
    "instruction": "Create a Jira user story for a financial advisor platform.",
    "input": "User Role: Financial Advisor, Task: Use AI to analyze client communication and identify key concerns or sentiments",
    "output": "As a Financial Advisor, I want to use AI to analyze client communication so that I can better understand their concerns and sentiments to improve my service.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given email or message exchanges, when AI processes the communication, then it should identify key concerns, emotions, and sentiments expressed by the client.\n- Given NLP capabilities, when clients raise issues in communication, then AI should flag critical matters (e.g. dissatisfaction, confusion) for immediate advisor attention.\n- Given ongoing communication, when AI detects recurring themes or questions, then it should generate insights and suggestions on how to address client concerns proactively.\n- Given client feedback, when AI analyzes sentiment over time, then it should generate reports indicating trends in client satisfaction or dissatisfaction.\n\nNegative Scenarios:\n- Given ambiguous language, when AI misinterprets client emotions, then the system should flag the communication for manual review before alerting the advisor.\n- Given privacy concerns, when AI analyzes sensitive client communications, then it should ensure that the data is securely processed and stored in compliance with regulations.\n- Given misclassification of sentiments, when AI categorizes a neutral message as negative, then it should notify the advisor to review and adjust the classification rules.\n- Given incomplete data inputs, when AI generates sentiment reports, then it should alert the advisor to missing or insufficient data for accurate analysis."
  },
  {
    "instruction": "Create a Jira user story for a financial advisor platform.",
    "input": "User Role: Financial Advisor, Task: Use AI to generate personalized recommendations for each client based on their financial behavior",
    "output": "As a Financial Advisor, I want to use AI to generate personalized recommendations for my clients so that I can provide them with tailored financial advice.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given client transaction history and preferences, when AI analyzes the data, then it should generate personalized recommendations for investments, savings, or debt management.\n- Given client spending patterns, when AI detects unusual or concerning financial behavior, then it should notify the advisor and suggest corrective actions.\n- Given ongoing financial changes, when AI analyzes real-time client data, then it should provide proactive advice such as saving more for retirement or adjusting spending habits.\n- Given different financial goals, when AI generates recommendations, then it should align them with the client's short-term and long-term objectives.\n\nNegative Scenarios:\n- Given conflicting client preferences, when AI generates recommendations, then it should flag any inconsistencies and prompt the advisor for further input.\n- Given inaccurate data inputs, when AI generates recommendations, then it should notify the advisor to review and confirm the validity of the data.\n- Given client rejection of AI recommendations, when AI provides advice that does not resonate with the client, then the advisor should have the option to adjust the recommendations manually.\n- Given AI misinterpretation of spending patterns, when it suggests incorrect advice, then the system should notify the advisor for a manual review before sending it to the client."
  },
  {
    "instruction": "Create a Jira user story for a developer platform.",
    "input": "User Role: Developer, Task: Implement AI to monitor compliance with regulatory requirements",
    "output": "As a Developer, I want to implement AI to monitor compliance with financial regulations so that the platform remains secure and compliant with industry standards.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given predefined compliance rules, when AI scans transactions and client data, then it should flag any actions that violate regulatory requirements (e.g. AML, KYC).\n- Given ongoing compliance updates, when new regulations are introduced, then AI should adjust monitoring rules and alert the development team of necessary changes.\n- Given real-time data processing, when AI detects non-compliant activities, then it should automatically trigger alerts and corrective actions within the system.\n- Given audit logs, when AI completes a compliance check, then it should generate detailed reports for future audits and recordkeeping.\n\nNegative Scenarios:\n- Given ambiguous regulations, when AI is unsure about compliance issues, then it should alert the developer and request clarification before flagging any actions.\n- Given false positives, when AI incorrectly flags compliant transactions, then the system should allow the developer to adjust the AI’s sensitivity and retrain the model.\n- Given outdated regulations, when AI relies on old rules, then it should notify the developer to update the regulatory database and pause certain actions until updated.\n- Given system downtime, when AI fails to monitor compliance in real-time, then the system should escalate the issue and temporarily revert to manual monitoring."
  },
  {
    "instruction": "Create a Jira user story for a developer platform.",
    "input": "User Role: Developer, Task: Implement AI for detecting potential fraudulent activities on the platform",
    "output": "As a Developer, I want to implement AI to detect potential fraud so that suspicious activities can be identified and mitigated before they cause harm.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given client transaction data, when AI detects anomalies, then it should flag potential fraud and alert the security team.\n- Given behavior analysis, when AI identifies unusual patterns, then it should provide a risk score and suggest further investigation.\n- Given real-time processing, when suspicious activity is detected, then AI should automatically trigger account freezes or notify relevant authorities as needed.\n- Given historical fraud data, when AI models are trained, then they should learn from past incidents to improve detection accuracy.\n\nNegative Scenarios:\n- Given false positives, when AI incorrectly flags transactions as fraudulent, then the system should allow security staff to review and override the decision if necessary.\n- Given insufficient training data, when AI struggles to identify newer fraud schemes, then the system should notify developers to update the model with more recent data.\n- Given system errors, when AI fails to detect fraud in real-time, then it should escalate the issue and request manual intervention.\n- Given rapidly evolving fraud techniques, when AI cannot detect emerging patterns, then it should prompt the development team to retrain the model regularly."
  },
  {
    "instruction": "Create a Jira user story for a financial advisor platform.",
    "input": "User Role: Financial Advisor, Task: Use AI to generate market predictions for informed investment decisions",
    "output": "As a Financial Advisor, I want to use AI to generate market predictions so that I can make informed investment decisions based on accurate forecasts.\n\nAcceptance Criteria:\nPositive Scenarios:\n- Given historical and real-time market data, when AI analyzes the trends, then it should generate predictions on market movements and provide actionable insights.\n- Given client-specific portfolios, when AI provides predictions, then it should tailor the forecasts to the client’s investments and risk tolerance.\n- Given predictive models, when AI identifies patterns, then it should provide advisors with confidence intervals and suggestions for buying, holding, or selling assets.\n- Given ongoing market updates, when significant events occur, then AI should adjust predictions accordingly and notify the advisor of the changes.\n\nNegative Scenarios:\n- Given incomplete data, when AI generates predictions, then it should notify the advisor of any limitations in the forecast accuracy.\n- Given rapid market changes, when AI fails to adjust predictions in real-time, then it should alert the advisor to the potential need for a manual review of investment strategies.\n- Given reliance on historical data, when AI struggles with unprecedented market events, then the system should prompt the advisor to consider external factors before making decisions.\n- Given conflicting predictions from different models, when AI generates differing forecasts, then it should notify the advisor to investigate the discrepancies."
  }
]
